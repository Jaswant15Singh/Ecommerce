<script>
    const url = window.location.pathname;
const parts = url.split('/');
const id = parts[parts.length - 1];

const menuBar = document.querySelector('#content nav .bx.bx-menu');
// const main=document.querySelector(".main");
const sidebar = document.getElementById('sidebar');
if (window.innerWidth < 768) {
    sidebar.classList.add('hide');
} 
menuBar.addEventListener('click', function () {
    sidebar.classList.toggle('hide');
})

document.getElementById('downloadExcelIndButton').addEventListener('click', function() {
    // Make a GET request to the generate-excel endpoint
    fetch(`<%= (url_pathname) %>admin/individual-excel/${id}`)
        .then(response => {
            if (response.ok) {
                // console.log(response);
                
                return response.blob(); // Get the response as a Blob
            } else {
                throw new Error('Network response was not ok.');
            }
        })
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'data.xlsx'; // Set the filename for the downloaded file
            document.body.appendChild(a);
            a.click(); // Programmatically click the link to trigger the download
            a.remove(); // Remove the link from the document
            window.URL.revokeObjectURL(url); // Release the object URL
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
});

let categoryData = [];

let categoryPage = 1;
const rowsPerCategoryPage = 5;
function fetchCategoryData() {
    fetch(`<%= (url_pathname) %>admin/get/ind_orders/Admin/${id}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data && data.data) {
                categoryData = data.data;
                displayCategoryPage(categoryPage);
                // generatepdf(data.data)
                setupCategoryPagination(categoryData.length);
            } else {
                console.error("No order data received.");
            }
        })
        .catch(error => {
            console.error('Error fetching order data:', error);
        });
}

function displayCategoryPage(page) {
    const tableBody = document.querySelector('#individualtable tbody');
    tableBody.innerHTML = '';

    const start = (page - 1) * rowsPerCategoryPage;
    const end = start + rowsPerCategoryPage;
    const paginatedCategoryData = categoryData.slice(start, end);

    let counter = start + 1;
    paginatedCategoryData.forEach(order => {
        const insertedDate = new Date(order.order_time);
        const formattedDateTime = `${insertedDate.getDate().toString().padStart(2, '0')}-${(insertedDate.getMonth() + 1).toString().padStart(2, '0')}-${insertedDate.getFullYear()} ${insertedDate.getHours().toString().padStart(2, '0')}:${insertedDate.getMinutes().toString().padStart(2, '0')}:${insertedDate.getSeconds().toString().padStart(2, '0')}`;
        console.log("or",order);
        
        const rowHTML = `
            <tr class="${order.order_status==='SUCCESS'?'hover-red' : 'hover-blue'}">
                <td>${counter}</td>
                <td>${order.product_name}(${order.label_name})</td>
                <td>${order.flavour_name}</td>
                <td>
                    <img src="<%= (url_pathname) %>${order.product_image}" alt="${order.product_name}" style="width:70px;height:70px;">
                </td>
                <td>${order.item_price}</td>
                <td>${order.quantity}</td>
                <td>${order.item_total_price}</td>
                <td>${formattedDateTime}</td>
            </tr>
        `;
        tableBody.insertAdjacentHTML('beforeend', rowHTML);
        counter++; // Increment the counter after adding the row
    });
}

function setupCategoryPagination(totalItems) {
    const paginationDiv = document.querySelector('#pagination');
    paginationDiv.innerHTML = '';

    const totalPages = Math.ceil(totalItems / rowsPerCategoryPage);

    for (let i = 1; i <= totalPages; i++) {
        const button = document.createElement('button');
        button.textContent = i;
        button.className = 'pagination-btn';
        if (i === categoryPage) {
            button.classList.add('active');
        }

        button.addEventListener('click', () => {
            categoryPage = i;
            displayCategoryPage(categoryPage);

            document.querySelectorAll('.pagination-btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
        });

        paginationDiv.appendChild(button);
    }
}

fetchCategoryData();


function generateReceipt() {
  const url = `<%= url_pathname %>admin/emailsending/${id}`;

  fetch(url)
    .then(response => response.blob())
    .then((blob) => {
        console.log(blob);
        
      const fileURL = window.URL.createObjectURL(blob);

      const a = document.createElement('a');
      a.href = fileURL;
      a.download = 'invoice.pdf';
      document.body.appendChild(a);
      a.click();
      a.remove();
    })
    .catch(error => console.error("Error fetching invoice:", error));
}


// function generatePDF(receiptData) {
//     const { jsPDF } = window.jspdf;
//     const doc = new jsPDF();
//     const topMargin = 20;
//     const gapBelowLine = 10;

//     doc.setFontSize(20);
//     doc.setFont("helvetica", "bold");
//     const title = `Receipt for Order:${receiptData.orderDetails.id}`;
//     const titleWidth = doc.getStringUnitWidth(title) * doc.getFontSize() / doc.internal.scaleFactor;
//     const titleX = (doc.internal.pageSize.width - titleWidth) / 2;
//     doc.text(title, titleX, topMargin);

//     doc.setDrawColor(0, 0, 0);
//     doc.line(10, topMargin + 5, 200, topMargin + 5);

//     doc.setFontSize(16);
//     doc.setFont("helvetica", "bold");
//     doc.text("Customer Details", 15, topMargin + 5 + gapBelowLine); 
//     doc.setFontSize(12);
//     doc.setFont("helvetica", "normal");
//     let y = topMargin + 5 + gapBelowLine + 10; 

//     const details = [
//         { label: "Customer Name:", value: receiptData.orderDetails.customer_name },
//         { label: "Customer Contact:", value: receiptData.orderDetails.customer_contact },
//         { label: "Email:", value: receiptData.orderDetails.customer_email },
//         {label:"Address:",value:receiptData.orderDetails.customer_address},
//         {label:"Pin-Code",value:receiptData.orderDetails.customer_pincode},
//         { label: "Order Date:", value: new Date(receiptData.orderDetails.inserted_date).toLocaleString() }
//     ];

//     details.forEach((detail) => {
//         doc.text(`${detail.label} ${detail.value}`, 15, y);
//         y += 10;
//     });

//     y += 10;

//     doc.setFontSize(16);
//     doc.setFont("helvetica", "bold");
//     doc.text("Receipt Details", 15, y);
//     y += 5;

//     doc.setFont("helvetica", "bold");
//     doc.setFillColor(220, 220, 220);
//     doc.rect(10, y, 190, 10, "F"); 
//     doc.setTextColor(0, 0, 0);
//     doc.setFontSize(12);

//     doc.text("Product Name", 15, y + 7);
//     doc.text("Quantity", 70, y + 7);
//     doc.text("Item Price", 110, y + 7);
//     doc.text("Total Price", 150, y + 7);
//     y += 10;

//     doc.setDrawColor(0, 0, 0);
//     doc.line(10, y, 200, y);
//     y += 5;

//     doc.setFont("helvetica", "normal");
//     receiptData.products.forEach((product) => {
//         const productName = doc.splitTextToSize(product.product_name, 50); 
//         const quantity = doc.splitTextToSize(product.quantity.toString(), 20); 
//         const itemPrice = doc.splitTextToSize(`${parseFloat(product.item_price).toFixed(2)}`, 30);
//         const totalPrice = doc.splitTextToSize(`${parseFloat(product.item_total_price).toFixed(2)}`, 30); 

//         const rowHeight = Math.max(
//             productName.length,
//             quantity.length,
//             itemPrice.length,
//             totalPrice.length
//         ) * 10; 
//         doc.setFillColor(255);
//         doc.rect(10, y - 7, 190, rowHeight, "F");

//         doc.text(productName, 15, y, { maxWidth: 50 });
//         doc.text(quantity, 70, y, { maxWidth: 20 });
//         doc.text(itemPrice, 110, y, { maxWidth: 30 });
//         doc.text(totalPrice, 150, y, { maxWidth: 30 });

//         y += rowHeight; 
//     });

//     doc.setDrawColor(0, 0, 0);
//     doc.line(10, y, 200, y);
//     y += 5;

//     doc.setFont("helvetica", "bold");
//     doc.text("Total Amount:", 140, y);
//     doc.text(`Rs.${parseFloat(receiptData.orderDetails.total_price).toFixed(2)}`, 175, y); 
//     y += 10;

//     doc.setFontSize(10);
//     doc.setFont("helvetica", "italic");
//     doc.text("Thank you for your purchase!", 10, y + 10);

//     doc.save(`receipt_${receiptData.orderDetails.id}.pdf`);
// }




const btn = document.getElementById("delivery_status");
const modal = document.getElementById("confirmationModal");
const confirmButton = document.getElementById("confirmButton");
const cancelButton = document.getElementById("cancelButton");
const overlay=document.querySelector(".price_overlay");
fetch(`<%= (url_pathname) %>Admin/delivery_status/${id}`)
    .then((res) => res.json())
    .then((data) => {
        // console.log(data[0]);
        if (data[0].deleivery_status === 'PENDING') {
            btn.classList.add("btn-danger");
        } else {
            btn.classList.add("btn-success");
            btn.style.opacity = 0.4;
            btn.disabled = true;
        }
    })
    .catch((e) => console.error(e));

btn.addEventListener("click", () => {
    modal.style.display = "flex";
    overlay.style.display="block"
});

confirmButton.addEventListener("click", () => {
    modal.style.display = "none";
    fetch(`<%= (url_pathname) %>Admin/update_delievery/${id}`, {
        method: "POST",
    })
        .then((res) => res.json())
        .then((data) => {
            // console.log(data);
            showPopup("Success", data.message, "Success");
            setTimeout(() => {
                window.location.reload();
            })
        }, 1000)
        .catch((e) => {
            showPopup("Failed", "Some issue occurred", "Failure");
        });
});

cancelButton.addEventListener("click", () => {
    modal.style.display = "none";
    overlay.style.display="none"
});

</script>