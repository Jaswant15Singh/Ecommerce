<!-- <!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .main {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 75vh;
    }

    .carousel {
      --color-default-state: #ddd;
      --color-active-state: #1bb9ed;
      position: relative;
      width: 80vw;
      height: 70vmin;
    }

    .carousel_track-container {
      overflow: hidden;
      width: 100%;
      height: 100%;
    }

    .carousel_track {
      position: relative;
      width: inherit;
      height: inherit;
      margin: 0;
      padding: 0;
      list-style: none;
    }

    .carousel_slide,
    .carousel_image {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      margin: 0;
      padding: 0;
    }

    .carousel_slide {
      padding: 5% 12% 8%;
      text-align: center;
      transform: translateX(-100%);
      transition: transform .3s ease-out;
    }

    .carousel_slide.is-selected {
      transform: translateX(0);
    }

    .carousel_slide.is-selected~.carousel_slide {
      transform: translateX(100%);
    }

    .carousel_image {
      z-index: -1;
    }

    .carousel_image>img {
      display: block;
      width: 100%;
      height: 100%;
      object-fit: contain;
      object-position: center;
      border: none;
    }

    .carousel_title {
      font-size: 40px;
      color: #fff;
    }

    .carousel_btn,
    .carousel_dot {
      z-index: 1;
      padding: 0;
      cursor: pointer;
      border: none;
    }

    .carousel_btn {
      position: absolute;
      top: 50%;
      background-color: transparent;
      transform: translateY(-50%);
    }

    .carousel_btn:focus,
    .carousel_dot:focus,
    .carousel_btn:active,
    .carousel_dot:active {
      outline: none;
    }

    .carousel_btn>* {
      pointer-events: none;
    }

    .carousel_btn svg {
      fill: var(--color-default-state);
      transform-origin: center;
      transition: fill .2s;
    }

    .carousel_btn:hover svg {
      fill: var(--color-active-state);
    }

    .jsPrev {
      left: 10px;
    }

    .jsNext {
      right: 10px;
    }

    .jsPrev svg {
      transform: rotate(-90deg);
    }

    .jsNext svg {
      transform: rotate(90deg);
    }

    .carousel_nav {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
    }

    .carousel_dot {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: var(--color-default-state);
      transition: background-color .2s;
    }

    .carousel_dot+.carousel_dot {
      margin-left: 20px;
    }

    .carousel_dot.is-selected {
      background-color: var(--color-active-state);
    }

    @media (min-width:768px) and (max-width:990px) {
      .main {
        min-height: 50vh !important;
      }
    }

    @media (max-width:767px) {
      .main {
        margin-top: -50px;
        min-height: 40vh !important;
      }
    }
  </style>
</head>

<body>
  <main class="main">
    <div class="carousel">
      <button type="button" class="carousel_btn jsPrev" aria-label="Previous slide">
        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" stroke-width="2"
          stroke-linecap="round" stroke-linejoin="round">
          <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
        </svg>
      </button>


      <div class="carousel_track-container">
        <ul class="carousel_track">
          <% if (banner && banner.length> 0) { %>
            <% banner.forEach((e, index)=> { %>
              <li class="carousel_slide <%= index === 0 ? 'is-selected' : '' %>">
                <div class="carousel_image">
                  <img src="<%= e.promotional_image %>" alt="<%= e.altText || 'Slide ' + (index + 1) %>"
                    role="presentation">
                </div>
              </li>
              <% }) %>
                <% } else { %>
                  <p>No promotional content available</p>
                  <% } %>
        </ul>
      </div>

      <button type="button" class="carousel_btn jsNext" aria-label="Next slide">
        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" stroke-width="2"
          stroke-linecap="round" stroke-linejoin="round">
          <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
        </svg>
      </button>
    </div>
  </main>
  <script>
    const carousel = document.querySelector('.carousel')
    const slider = carousel.querySelector('.carousel_track')
    let slides = [...slider.children]

    slider.prepend(slides[slides.length - 1])

    const createDots = (carousel, initSlides) => {
      const dotsContainer = document.createElement('div')
      dotsContainer.classList.add('carousel_nav')

      initSlides.forEach((slide, index) => {
        const dot = document.createElement('button')
        dot.type = 'button'
        dot.classList.add('carousel_dot')
        dot.setAttribute('aria-label', `Slide number ${index + 1}`)
        slide.dataset.position = index
        slide.classList.contains('is-selected') && dot.classList.add('is-selected')
        dotsContainer.appendChild(dot)
      })

      carousel.appendChild(dotsContainer)

      return dotsContainer
    }

    const updateDot = slide => {
      const currDot = dotNav.querySelector('.is-selected')
      const targetDot = slide.dataset.position

      currDot.classList.remove('is-selected')
      dots[targetDot].classList.add('is-selected')
    }

    const handleArrowClick = arrow => {
      arrow.addEventListener('click', () => {
        slides = [...slider.children]
        const currSlide = slider.querySelector('.is-selected')
        currSlide.classList.remove('is-selected')
        let targetSlide

        if (arrow.classList.contains('jsPrev')) {
          targetSlide = currSlide.previousElementSibling
          slider.prepend(slides[slides.length - 1])
        }

        if (arrow.classList.contains('jsNext')) {
          targetSlide = currSlide.nextElementSibling
          slider.append(slides[0])
        }

        targetSlide.classList.add('is-selected')
        updateDot(targetSlide)
      })
    }

    const buttons = carousel.querySelectorAll('.carousel_btn')
    buttons.forEach(handleArrowClick)

    const handleDotClick = dot => {
      const dotIndex = dots.indexOf(dot)
      const currSlidePos = slider.querySelector('.is-selected').dataset.position
      const targetSlidePos = slider.querySelector(`[data-position='${dotIndex}']`).dataset.position

      if (currSlidePos < targetSlidePos) {
        const count = targetSlidePos - currSlidePos
        for (let i = count; i > 0; i--) nextBtn.click()
      }

      if (currSlidePos > targetSlidePos) {
        const count = currSlidePos - targetSlidePos
        for (let i = count; i > 0; i--) prevBtn.click()
      }
    }

    const dotNav = createDots(carousel, slides)
    const dots = [...dotNav.children]
    const prevBtn = buttons[0]
    const nextBtn = buttons[1]

    dotNav.addEventListener('click', e => {
      const dot = e.target.closest('button')
      if (!dot) return
      handleDotClick(dot)
    })

    const slideTiming = 120000
    let interval
    const slideInterval = () => interval = setInterval(() => nextBtn.click(), slideTiming)

    carousel.addEventListener('mouseover', () => clearInterval(interval))
    carousel.addEventListener('mouseleave', slideInterval)
    slideInterval()

  </script>
</body>

</html>
 -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .carousel {
      position: relative;
      overflow: hidden;
      width: 100%;
      max-width: 900px;
      /* Increased width */
      margin: 0 auto;
    }

    .carousel-track {
      display: flex;
      transition: transform 0.5s ease-in-out;
    }

    .carousel-image {
      max-height: 70vh;
      min-width: 100%;
      height: auto;
      object-fit: contain;
    }

    .carousel-button {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(0, 0, 0, 0.5);
      color: white;
      border: none;
      padding: 10px 20px;
      cursor: pointer;
      z-index: 10;
      border-radius: 50%;
    }

    .carousel-button.prev {
      left: 10px;
    }

    .carousel-button.next {
      right: 10px;
    }

    .carousel-button:hover {
      background: rgba(0, 0, 0, 0.8);
    }
  </style>
</head>

<body>
  <div class="carousel">
    <div class="carousel-track">
      <% banner.forEach((e, index)=> { %>
            <img src="<%= e.promotional_image %>" alt="<%= e.altText || 'Slide ' + (index + 1) %>"
              role="presentation" class="carousel-image">

        <% }) %>

    </div>
    <button class="carousel-button prev">❮</button>
    <button class="carousel-button next">❯</button>
  </div>

  <script>
   const track = document.querySelector('.carousel-track');
const prevButton = document.querySelector('.carousel-button.prev');
const nextButton = document.querySelector('.carousel-button.next');

let currentIndex = 0;

function updateCarousel() {
  const width = track.children[0].getBoundingClientRect().width;
  track.style.transform = `translateX(-${currentIndex * width}px)`;
}

function autoScroll() {
  currentIndex = (currentIndex + 1) % track.children.length;
  updateCarousel();
}

nextButton.addEventListener('click', () => {
  currentIndex = (currentIndex + 1) % track.children.length;
  updateCarousel();
  resetAutoScroll();
});

prevButton.addEventListener('click', () => {
  currentIndex = (currentIndex - 1 + track.children.length) % track.children.length;
  updateCarousel();
  resetAutoScroll();
});

let scrollInterval = setInterval(autoScroll, 5000);

function resetAutoScroll() {
  clearInterval(scrollInterval);
  scrollInterval = setInterval(autoScroll, 5000);
}

window.addEventListener('resize', updateCarousel);


  </script>
</body>

</html>